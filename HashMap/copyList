/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        
        Node current = head;
        Map<Node, Node> cloneMap = new HashMap<>();
        
        while (current != null) {
            cloneMap.put(current, new Node());
            current = current.next;
        }
        
        current = head;
        while (current != null) {
            cloneMap.get(current).val = current.val;
            cloneMap.get(current).next = cloneMap.get(current.next);
            cloneMap.get(current).random = cloneMap.get(current.random);
            
            current = current.next;
        }
        
        return cloneMap.get(head);
        
    }
}
