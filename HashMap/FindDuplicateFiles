class Solution {
    public List<List<String>> findDuplicate(String[] paths) {
        List<List<String>> result = new ArrayList<>();
        if (paths == null || paths.length == 0) {
            return result;
        }
        
        Map<String, List<String>> pathByFileContent = new HashMap<>();
        for (String path : paths) {
            String[] fileDir = path.split(" ");
            String dir = fileDir[0];
            
            for (int i = 1; i < fileDir.length; i++) {
                int fileContentStartIndex = fileDir[i].indexOf('(');
                int fileContentEndIndex = fileDir[i].indexOf(')');
                String fileContent = fileDir[i].substring(fileContentStartIndex+1, fileContentEndIndex);
                String fileName = fileDir[i].substring(0, fileContentStartIndex);
                
                pathByFileContent.putIfAbsent(fileContent, new ArrayList<String>());
                List<String> files = pathByFileContent.get(fileContent);
                files.add(dir+"/"+fileName);
                pathByFileContent.put(fileContent, files);
            }
        }
        
        for(Map.Entry<String,List<String>> entry:pathByFileContent.entrySet()){
            if(entry.getValue().size()>1){
                result.add(entry.getValue());
            }
        }
        return result;
    }
}
