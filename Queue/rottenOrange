class Solution {
    int count = 0;
    public int orangesRotting(int[][] grid) {
        if (grid == null) {
            throw new IllegalArgumentException("Invalid input");
        }
        
        if (grid.length == 0) {
            return 0;
        }
        
        Queue<int[]> rottenOrangeIndex = new LinkedList<>();
        int fresh_orange = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) {
                     rottenOrangeIndex.offer(new int[]{i, j});
                } else if (grid[i][j] == 1) {
                    fresh_orange++;
                }
            }
        }
        
        if (fresh_orange == 0) {
            return 0;
        }
        
        int minCount = 0;
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        while (!rottenOrangeIndex.isEmpty()) {
            int size = rottenOrangeIndex.size();
            
            for (int i = 0; i < size; i++) {
                int[] index = rottenOrangeIndex.poll();
                
                for (int[] dir : dirs) {
                    int x = index[0] + dir[0];
                    int y = index[1] + dir[1];
                    
                    if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] == 0 || grid[x][y] == 2) continue;
                    grid[x][y] = 2;
                    fresh_orange--;
                    rottenOrangeIndex.offer(new int[]{x, y});
                }        
            }
            minCount++;
        }
        return fresh_orange == 0 ? minCount-1 : -1;
    }
    
}
