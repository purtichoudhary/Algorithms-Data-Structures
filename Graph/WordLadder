class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        
        if (!wordSet.contains(endWord)) {
            System.out.println("wordSet doesn't contain endWord");
            return 0;
        }
        
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        int count = 0;
        
        while (!q.isEmpty()) {
            for (int i = q.size(); i > 0; --i) {
                String word = q.poll();
                if (word.equals(endWord)) {
                    return count+1;
                }
                
                for (int j = 0; j < word.length(); ++j) {
                    char[] newWord = word.toCharArray();
                    
                    for (char ch = 'a'; ch <= 'z'; ++ch) {
                        newWord[j] = ch;
                        String s = new String(newWord);
                        
                        if (wordSet.contains(s) && !s.equals(word)) {
                            q.offer(s);
                            wordSet.remove(s);
                        }
                    }
                }
            }
            ++count;
        }
        return 0;
    }
}
