/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        if (headA == null || headB == null) {
            return null;
        }
        int lengthA = 0;
        int lengthB = 0;
        ListNode nodeA = headA;
        ListNode nodeB = headB;
        int rem = 0;
        
        while (nodeA != null) {
            nodeA = nodeA.next;
            lengthA++;
        }
        while (nodeB != null) {
            nodeB = nodeB.next;
            lengthB++;
        }
        nodeA = headA;
        nodeB = headB;
        
        if (lengthA > lengthB) {
            rem = lengthA - lengthB;
            for (int i = 0; i < rem; i++) {
                nodeA = nodeA.next;
            }
        } else {
            rem = lengthB - lengthA;
            for (int i = 0; i < rem; i++) {
                nodeB = nodeB.next;
            }
        }
        
        while (nodeA != null && nodeB != null) {
            if (nodeA == nodeB) {
                return nodeA;
            }
            nodeA = nodeA.next;
            nodeB = nodeB.next;
        }
        return null;
    }
